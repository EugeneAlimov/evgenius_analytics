{"version":3,"file":"static/js/Settings.1d5cd9cb.chunk.js","mappings":"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","sources":["Libs/getWindowDimensions.js","Libs/excel-csv.js","api/settingsApi.js","Components/AccordionAnalitycs/AllTagsListDashboard/AllTagsListDashboard.jsx","Components/AccordionAnalitycs/SelectedTagsListDashboard/SelectedTagsListDashboard.jsx","Components/UI/FileUpload/FileUpload.jsx","Views/Settings.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\n\nconst getWindowDimensions = () => {\n    const { innerWidth: width, innerHeight: height } = window;\n    return [\n      width,\n      height\n    ]\n  }\n  \n   const useWindowDimensions = () => {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  \n    useEffect(() => {\n      function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n      }\n  \n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }, []);\n  \n    return windowDimensions;\n  }\n  \n  export default useWindowDimensions\n","import * as XLSX from \"xlsx\";\n\nfunction handleFile(fileToParce) {\n  let f = fileToParce;\n  let reader = new FileReader();\n\n  reader.onload = function (fileToParce) {\n    let data = new Uint8Array(fileToParce.target.result);\n    let workbook = XLSX.read(data, { type: \"array\" });\n    let CSV_book = XLSX.utils.book_new(); // Create new book\n\n    CSV_book.Props = {\n      Title: \"Node-red TagsList\",\n    };\n\n    let first_sheet_name = workbook.SheetNames[0]; // Get Sheet name\n    let worksheet = workbook.Sheets[first_sheet_name]; // Get worksheet\n    let range = XLSX.utils.decode_range(worksheet[\"!ref\"]); // Get the range\n    let listRange = Object.values(range)[1].r;\n    let i = 1;\n    let sheetArr = [];\n    let nameTag = \"\";\n\n    for (i; i < listRange; i++) {\n      let A_X_Cell = worksheet[`A${i}`];\n      let A_X_Value = String(A_X_Cell ? A_X_Cell.v : undefined);\n      if (A_X_Value.includes(\"Spare\")) {\n        continue;\n      }\n      let B_X_Cell = worksheet[`B${i}`];\n      let B_X_Value = String(B_X_Cell ? B_X_Cell.v : undefined);\n      let C_X_Cell = worksheet[`C${i}`];\n      let C_X_Value = String(C_X_Cell ? C_X_Cell.v : undefined);\n      let D_X_Cell = worksheet[`D${i}`];\n      let D_X_Value = String(D_X_Cell ? D_X_Cell.v : undefined);\n\n      let A_Cell_CSV = \"\";\n      let B_Cell_CSV = \"\";\n\n      // in case tag table\n      if (D_X_Value.includes(\"%\")) {\n        if (C_X_Value === \"Timer\") {\n          A_Cell_CSV = \"MD\" + D_X_Value.slice(2);\n        } else {\n          A_Cell_CSV = D_X_Value.slice(1);\n        }\n        B_Cell_CSV = `${A_X_Value} - ${B_X_Value}`;\n\n        // in case DB\n      } else {\n        if (B_X_Value.includes(\"Struct\")) {\n          let cellNum = 4;\n          let flag = true;\n\n          while (flag) {\n            let cellref = XLSX.utils.encode_cell({ c: cellNum, r: i - 1 });\n            let cell = worksheet[`${cellref}`];\n            let cell_Value = String(cell ? cell.v : undefined).trim();\n\n            switch (cell_Value) {\n              case \"undefined\":\n                flag = false;\n                break;\n              default:\n                if (cellNum === 4) nameTag = \"\";\n                nameTag = `${nameTag} - ${cell_Value}`;\n                cellNum++;\n            }\n          }\n          continue;\n        }\n\n        let dataType = \"\";\n        if (B_X_Value === \"Bool\") {\n          dataType = \"X\";\n          if (!C_X_Value.includes(\".\")) {\n            C_X_Value = C_X_Value + \".0\";\n          }\n        } else if (B_X_Value === \"Int\") {\n          dataType = \"DI\";\n        } else if (B_X_Value === \"Dint\") {\n          dataType = \"DW\";\n        } else if (B_X_Value === \"Real\") {\n          dataType = \"R\";\n        } else if (B_X_Value === \"Time\") {\n          dataType = \"DW\";\n        }\n\n        if (!dataType.includes(\"X\")) {\n          if (C_X_Value.includes(\".0\")) {\n            C_X_Value = C_X_Value.slice(0, C_X_Value.length - 2);\n          }\n        }\n\n        A_Cell_CSV = `${D_X_Value},${dataType}${C_X_Value}`;\n        B_Cell_CSV = `${A_X_Value}${nameTag}`;\n        console.log(B_Cell_CSV, i, listRange);\n      }\n      const cellArr = [];\n      cellArr.push(A_Cell_CSV, B_Cell_CSV);\n      sheetArr.push(cellArr);\n    }\n    let CSV_sheet = XLSX.utils.aoa_to_sheet(sheetArr);\n    XLSX.utils.sheet_to_csv(CSV_sheet);\n    XLSX.utils.book_append_sheet(CSV_book, CSV_sheet);\n    XLSX.writeFile(CSV_book, \"Node-red TagsList.csv\", { bookType: \"csv\", FS: \"\\t\" });\n  };\n\n  reader.readAsArrayBuffer(f);\n}\n\nexport default handleFile;\n","import axios from \"axios\";\n\nexport const uploadFile = async (file) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n\n  try {\n    const request = await axios.post(\n      \"http://192.168.8.167/api/v1/pars-tags-list/\",\n\n      formData,\n      {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      }\n    );\n    return request;\n  } catch (error) {\n    console.log(\"error: \", error.response.data);\n  }\n};\n\nexport const setTagstoDashboard = async (tagsOnDashboard) => {\n  try {\n    const request = await axios.put(\n      \"http://192.168.8.167/tags-to-ws/\",\n      {\n        label: tagsOnDashboard,\n        headers: {\n          // Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    \n    return request;\n  } catch (error) {\n    console.log(\"error: \", error.response.data);\n  }\n};\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Paper,\n  ListItem,\n  Box,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n  Checkbox,\n  Tooltip,\n  TextField,\n  Stack,\n  Autocomplete,\n  Typography,\n} from \"@mui/material\";\nimport { FixedSizeList } from \"react-window\";\nimport { useEffect } from \"react\";\nimport { saveTagsDashboard } from \"../../../Redux/sliceAnalytic\";\n\nconst AllTagsListDashboard = ({ height }) => {\n  const dispatch = useDispatch();\n\n  const tags = useSelector((state) => state.analytic.tags);\n  const groups = useSelector((state) => state.analytic.groups);\n\n  const [groupFilter, setGroupFilter] = useState(null);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [value, setValue] = useState(null);\n  const [filteredByGroupTags, setFilteredByGroupsTags] = useState([]);\n  const [searchedAndFilteredByGroupTags, setSearchedAndFilteredByGroupTags] = useState([]);\n\n  useEffect(() => {\n    setGroupFilter(value);\n  }, [value]);\n\n  //Filter tags array by group\n  useEffect(() => {\n    if (groupFilter === null) {\n      setFilteredByGroupsTags(tags);\n      return;\n    }\n\n    const tagsArr = tags.filter((tag) => tag.label === groupFilter.label);\n    setFilteredByGroupsTags(tagsArr);\n  }, [groupFilter, tags]);\n\n  //Search tag on a filtered array\n  useEffect(() => {\n    const tagsArr = filteredByGroupTags.filter((tag) =>\n      tag.name_tag.toLowerCase().includes(searchValue.toLowerCase())\n    );\n    setSearchedAndFilteredByGroupTags(tagsArr);\n  }, [filteredByGroupTags, searchValue]);\n\n  const lisTtagsLength = searchedAndFilteredByGroupTags.length;\n  const rowHeith = height - 282;\n\n  const Row = ({ index, style }) => (\n    <Tooltip\n      key={index}\n      placement=\"right\"\n      title={\n        <Typography sx={{ m: 0 }} paragraph={true}>\n          Address: {searchedAndFilteredByGroupTags[index].address}\n          <br />\n          Datatype: {searchedAndFilteredByGroupTags[index].data_type}\n          <br />\n          Tagtable: {searchedAndFilteredByGroupTags[index].tag_table}\n          <br />\n          Comment: {searchedAndFilteredByGroupTags[index].comment}\n          <br />\n          Group: {searchedAndFilteredByGroupTags[index].label}\n        </Typography>\n      }\n      style={style}\n    >\n      <ListItem divider dense={true}>\n        <ListItemButton\n          role={undefined}\n          onClick={() => dispatch(saveTagsDashboard(searchedAndFilteredByGroupTags[index].id))}\n          dense={true}\n        >\n          <ListItemIcon sx={{ minWidth: \"35px\" }}>\n            <Checkbox\n              edge=\"start\"\n              checked={searchedAndFilteredByGroupTags[index].on_dashboard}\n              tabIndex={-1}\n              disableRipple={true}\n              inputProps={{ \"aria-labelledby\": searchedAndFilteredByGroupTags[index].id }}\n            />\n          </ListItemIcon>\n          <ListItemText\n            id={searchedAndFilteredByGroupTags[index].id}\n            primary={\n              <Typography sx={{ m: 0, overflowWrap: \"break-word\" }} paragraph={true} noWrap={false}>\n                {searchedAndFilteredByGroupTags[index].name_tag} <br />\n              </Typography>\n            }\n          />\n        </ListItemButton>\n      </ListItem>\n    </Tooltip>\n  );\n\n  return (\n    <Paper sx={{ p: 2, m: 2, height: height - 64, width: \"420px\" }} elevation={10} square>\n      <Box component=\"div\" mb={0} p={1} sx={{ border: \"none\", minHeight: \"10px\" }}>\n        <Typography display=\"block\" sx={{ color: \"#666666\", fontSize: 26, ml: 2 }}>\n          Please, select a tags from list\n        </Typography>\n      </Box>\n      <Paper sx={{ m: 0 }} elevation={5} square>\n        <Box component=\"div\" mb={2} p={2} sx={{ border: \"none\", minHeight: \"10px\" }}>\n          <Stack direction=\"column\" spacing={3}>\n            <TextField\n              value={searchValue}\n              onChange={(event) => setSearchValue(event.currentTarget.value)}\n              sx={{ offset: 100 }}\n              id=\"outlined-search\"\n              label=\"Search tag\"\n              type=\"search\"\n              size=\"small\"\n            />\n            <Autocomplete\n              size=\"small\"\n              disablePortal\n              id=\"combo-box-demo\"\n              options={groups}\n              sx={{ offset: 100 }}\n              freeSolo\n              value={value}\n              onChange={(_, newText) => {\n                setValue(newText);\n              }}\n              renderInput={(params) => <TextField {...params} label=\"Filter by group\" />}\n            />\n          </Stack>\n        </Box>\n      </Paper>\n      <FixedSizeList\n        height={rowHeith}\n        width={\"100%\"}\n        itemSize={64}\n        itemCount={lisTtagsLength}\n        layout=\"vertical\"\n        overscanCount={8}\n      >\n        {Row}\n      </FixedSizeList>\n    </Paper>\n  );\n};\n\nexport default AllTagsListDashboard;\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\"\n\nimport { Paper, Tooltip, Box, Typography } from \"@mui/material\";\nimport { List, ListItem, ListItemText, IconButton } from \"@mui/material\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nimport binarySearch from \"../../../Libs/binarySearch\";\n\nimport { saveTagsDashboard } from \"../../../Redux/sliceAnalytic\";\n\nconst SelectedTagsListDashboard = ({ height }) => {\n  const [filteredList, setFilteredList] = useState([]);\n\n  const dispatch = useDispatch();\n  const tags = useSelector((state) => state.analytic.tags);\n\n  useEffect(() => {\n    const dashTags = tags.filter((el) => el.on_dashboard === true);\n\n    setFilteredList(dashTags);\n  }, [tags]);\n\n  const removeSelectedTagHandler = (id) => {\n    // const newTags = _.cloneDeep(tags)\n    // const elemIndex = binarySearch(newTags, id);\n\n    // const onDash = newTags[elemIndex].on_dashboard;\n    // newTags[elemIndex].on_dashboard = !onDash;\n\n    // dispatch(saveTagsDashboard(newTags));\n    dispatch(saveTagsDashboard(id));\n  };\n\n  return (\n    <Paper sx={{ p: 2, m: 2, height: height - 64, width: \"420px\" }} elevation={10} square>\n      <Box component=\"div\" mb={0} p={1} sx={{ border: \"none\", minHeight: \"10px\" }}>\n        <Typography display=\"block\" sx={{ color: \"#666666\", fontSize: 26, ml: 2 }}>\n          Selected tags\n        </Typography>\n      </Box>\n      <List\n        style={{\n          overflowY: \"scroll\",\n          height: `${height - 146}px`,\n          paddingRight: \"12px\",\n          bgcolor: \"background.paper\",\n        }}\n      >\n        {filteredList.map((value) => {\n          const labelId = `checkbox-list-label-${value}`;\n          const { id, name_tag, tag_table, address, data_type, comment, label } = value;\n\n          return (\n            <Tooltip\n              key={id}\n              placement=\"right\"\n              title={\n                <Typography sx={{ m: 0, overflowWrap: \"break-word\" }} paragraph={true}>\n                  Address: {address}\n                  <br />\n                  Datatype: {data_type}\n                  <br />\n                  Tagtable: {tag_table}\n                  <br />\n                  Comment: {comment}\n                </Typography>\n              }\n            >\n              <ListItem divider dense={true}>\n                <ListItemText\n                  id={labelId}\n                  primary={\n                    <Typography sx={{ m: 0, overflowWrap: \"break-word\" }} paragraph={true}>\n                      TAG: {name_tag}\n                      <br />\n                      GROUP: {label}\n                    </Typography>\n                  }\n                />\n                <IconButton\n                  onClick={() => removeSelectedTagHandler(id)}\n                  edge=\"end\"\n                  aria-label=\"comments\"\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </ListItem>\n            </Tooltip>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n};\nexport default SelectedTagsListDashboard;\n","import React from \"react\";\nimport { Button, Snackbar, Alert } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\nimport { useState, useEffect } from \"react\";\nimport handleFile from \"../../../Libs/excel-csv\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { uploadFile } from \"../../../api/settingsApi\";\n\nconst FileUpload = () => {\n  const accessToken = useSelector((state) => state.login.token.refresh);\n  const dispatch = useDispatch();\n\n  const Input = styled(\"input\")({\n    display: \"none\",\n  });\n\n  const [file, setFile] = useState(null);\n\n  const [snakState, setSnakState] = React.useState({\n    open: false,\n    vertical: \"top\",\n    horizontal: \"right\",\n    message: \"\",\n  });\n\n  useEffect(() => {\n    if (!file) return;\n\n    const snakBarShow = (message) => {\n      setSnakState({\n        open: true,\n        message: message,\n        vertical: \"top\",\n        horizontal: \"left\",\n      });\n    };\n\n    uploadFile(file, accessToken)\n      .then((response) => {\n        console.log(\"response: \", response);\n        snakBarShow(\"File uploaded\");\n      })\n      .catch((error) => {\n        snakBarShow(\"File upload failed\");\n        console.error(error);\n      });\n\n    handleFile(file);\n    // uploadFile(file, accessToken)\n  }, [accessToken, dispatch, file]);\n\n  const { vertical, horizontal, open, message } = snakState;\n\n  const snakBarClose = () => {\n    setSnakState({ ...snakState, open: false });\n  };\n\n  return (\n    <>\n      <form encType=\"multipart/form-data\" method=\"post\">\n        <label htmlFor=\"contained-button-file\">\n          <Input\n            accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\n            id=\"contained-button-file\"\n            multiple={false}\n            type=\"file\"\n            value={undefined}\n            hiden=\"true\"\n            onChange={(event) => setFile(event.currentTarget.files[0])}\n          />\n          <Button variant=\"contained\" component=\"span\">\n            Upload excel file\n          </Button>\n        </label>\n      </form>\n      <Snackbar\n        anchorOrigin={{ vertical, horizontal }}\n        open={open}\n        onClose={snakBarClose}\n        autoHideDuration={6000}\n        key={vertical + horizontal}\n      >\n        <Alert onClose={snakBarClose} severity=\"success\" sx={{ width: \"100%\", mt: \"210px\" }}>\n          {message}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n\nexport default FileUpload;\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport _ from \"lodash\";\n\nimport getWindowDimensions from \"../Libs/getWindowDimensions\";\nimport handleFile from \"../Libs/excel-csv\";\nimport { setTagstoDashboard, uploadFile } from \"../api/settingsApi\";\n\nimport Paper from \"@mui/material/Paper\";\nimport Input from \"@mui/material/Input\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\n\nimport AllTagsListDashboard from \"../Components/AccordionAnalitycs/AllTagsListDashboard/AllTagsListDashboard\";\nimport SelectedTagsListDashboard from \"../Components/AccordionAnalitycs/SelectedTagsListDashboard/SelectedTagsListDashboard\";\nimport FileUpload from \"../Components/UI/FileUpload/FileUpload\";\n\nconst Settings = () => {\n  const [comparedArr, setCompareArr] = useState([]);\n\n  const tags = useSelector((state) => state.analytic.tags);\n\n  const [file, setFile] = useState();\n  const [width, height] = getWindowDimensions();\n\n  const toWSTags = () => {\n    const tempArr = [];\n    console.log('comparedArr ', comparedArr);\n    console.log('tags ', tags);\n    comparedArr.forEach((element, index) => {\n      if (element.on_dashboard !== tags[index].on_dashboard) {\n        tempArr.push(tags[index]);\n      }\n    });\n    console.log(\"tempArr \", tempArr);\n    setTagstoDashboard(tempArr).finally();\n  };\n\n  useEffect(() => {\n    const dashTags = _.cloneDeep(tags);\n\n    setCompareArr(dashTags);\n  }, []);\n\n  const exselToCsv = () => {\n    handleFile(file);\n  };\n\n  const toAnalityc = () => {\n    uploadFile(file);\n  };\n\n  return (\n    <Box sx={{ display: \"flex\", flexDirection: \"row\" }}>\n      <Paper\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          backgroundColor: \"#f9f8f8\",\n          margin: 20,\n          padding: 15,\n        }}\n      >\n        <Input type=\"file\" onChange={(event) => setFile(event.currentTarget.files[0])}></Input>\n        <Button\n          sx={{ m: 2, width: \"360px\", height: \"50px\" }}\n          variant=\"contained\"\n          size=\"large\"\n          onClick={exselToCsv}\n        >\n          To CSV\n        </Button>\n        <Button\n          sx={{ m: 2, width: \"360px\", height: \"50px\" }}\n          variant=\"contained\"\n          size=\"large\"\n          onClick={toAnalityc}\n        >\n          To analityc\n        </Button>\n        <Button\n          sx={{ m: 2, width: \"360px\", height: \"50px\" }}\n          variant=\"contained\"\n          size=\"large\"\n          onClick={toWSTags}\n        >\n          To dashboard\n        </Button>\n        <FileUpload />\n      </Paper>\n      <AllTagsListDashboard height={height} />\n      <SelectedTagsListDashboard height={height} />\n    </Box>\n  );\n};\n\nexport default Settings;\n"],"names":["getWindowDimensions","window","innerWidth","innerHeight","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","fileToParce","f","reader","FileReader","onload","data","Uint8Array","target","result","workbook","XLSX","type","CSV_book","Props","Title","first_sheet_name","SheetNames","worksheet","Sheets","range","listRange","Object","values","r","i","sheetArr","nameTag","A_X_Cell","A_X_Value","String","v","undefined","includes","B_X_Cell","B_X_Value","C_X_Cell","C_X_Value","D_X_Cell","D_X_Value","A_Cell_CSV","B_Cell_CSV","slice","cellNum","flag","cellref","c","cell","cell_Value","trim","dataType","length","console","log","cellArr","push","CSV_sheet","bookType","FS","readAsArrayBuffer","uploadFile","file","formData","FormData","append","axios","headers","request","response","setTagstoDashboard","tagsOnDashboard","label","height","dispatch","useDispatch","tags","useSelector","state","analytic","groups","groupFilter","setGroupFilter","searchValue","setSearchValue","value","setValue","filteredByGroupTags","setFilteredByGroupsTags","searchedAndFilteredByGroupTags","setSearchedAndFilteredByGroupTags","tagsArr","filter","tag","name_tag","toLowerCase","lisTtagsLength","rowHeith","Paper","sx","p","m","width","elevation","square","Box","component","mb","border","minHeight","Typography","display","color","fontSize","ml","Stack","direction","spacing","TextField","onChange","event","currentTarget","offset","id","size","Autocomplete","disablePortal","options","freeSolo","_","newText","renderInput","params","itemSize","itemCount","layout","overscanCount","index","style","Tooltip","placement","title","paragraph","address","data_type","tag_table","comment","ListItem","divider","dense","ListItemButton","role","onClick","saveTagsDashboard","ListItemIcon","minWidth","Checkbox","edge","checked","on_dashboard","tabIndex","disableRipple","inputProps","ListItemText","primary","overflowWrap","noWrap","filteredList","setFilteredList","dashTags","el","List","overflowY","paddingRight","bgcolor","map","labelId","IconButton","removeSelectedTagHandler","Delete","accessToken","login","token","refresh","Input","styled","setFile","React","open","vertical","horizontal","message","snakState","setSnakState","snakBarShow","then","catch","error","handleFile","snakBarClose","encType","method","htmlFor","accept","multiple","hiden","files","Button","variant","Snackbar","anchorOrigin","onClose","autoHideDuration","Alert","severity","mt","comparedArr","setCompareArr","flexDirection","backgroundColor","margin","padding","tempArr","forEach","element","finally"],"sourceRoot":""}