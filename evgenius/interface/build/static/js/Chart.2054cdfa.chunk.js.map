{"version":3,"file":"static/js/Chart.2054cdfa.chunk.js","mappings":"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","sources":["Views/Chart.jsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\n// import { annotationLine } from \"../Libs/chartJsPlugins\";\n\nimport \"chartjs-adapter-luxon\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale,\n  TimeSeriesScale,\n  Decimation,\n} from \"chart.js\";\nimport {\n  // getElementAtEvent,\n  Line,\n} from \"react-chartjs-2\";\nimport * as zoom from \"chartjs-plugin-zoom\";\nimport zoomPlugin from \"chartjs-plugin-zoom\";\nimport { Button } from \"@mui/material\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale,\n  TimeSeriesScale,\n  Decimation\n);\n\nconst Chart = ({ data }) => {\n  const chartRef = useRef();\n\n  const [tableData, setTableData] = useState([]);\n\n  // const onClick = (event) => {\n  //   const elementArray = getElementAtEvent(chartRef.current, event);\n  //   const getdatasetAndElementIndexes = (elementArray) => {\n  //     let datasetIndex = null;\n  //     let elementIndex = null;\n  //     if (elementArray.length > 0) {\n  //       datasetIndex = getElementAtEvent(chartRef.current, event)[0].datasetIndex;\n  //       elementIndex = getElementAtEvent(chartRef.current, event)[0].index;\n  //       return [datasetIndex, elementIndex];\n  //     }\n  //     return [datasetIndex, elementIndex];\n  //   };\n\n  // const [datasetIndex, elementIndex] = getdatasetAndElementIndexes(elementArray);\n  // if (datasetIndex !== null && elementIndex !== null) {\n  //   console.log(\"datasetIndex: \", datasetIndex, \"elementIndex: \", elementIndex);\n  // }\n\n  //   console.log(chartRef.current.scales);\n  //   console.table(chartRef.current.chartArea);\n  //   const { canvas } = chartRef.current;\n  //   let rect = canvas.getBoundingClientRect();\n  //   const x = event.clientX - rect.left;\n  //   const y = event.clientY - rect.top;\n  // };\n\n  const tableDataCreating = (currentArr) => {\n    const newTableArr = currentArr.map((el) => {\n      const yArr = el.dataset.data.map((el) => {\n        return el.y;\n      });\n\n      const min = (arr) => arr.reduce((x, y) => Math.min(x, y));\n      const max = (arr) => arr.reduce((x, y) => Math.max(x, y));\n      const summ = (arr) =>\n        arr.reduce((x, y) => {\n          return x + y;\n        }, 0);\n      return {\n        name: el.dataset.label,\n        current: el.raw.y,\n        time: el.label,\n        minimum: min(yArr),\n        maximum: max(yArr),\n        average: Math.round10(summ(yArr) / el.dataset.data.length, -2),\n      };\n    });\n    setTableData(newTableArr);\n  };\n\n  const annotationLine = {\n    id: \"annotationLine\",\n    beforeDraw: (chartRef) => {\n      if (chartRef.tooltip._active && chartRef.tooltip._active.length) {\n        const ctx = chartRef.ctx;\n        const { top, bottom } = chartRef.chartArea;\n        ctx.save();\n        const activePoint = chartRef.tooltip._active[0];\n\n        ctx.beginPath();\n        ctx.setLineDash([5, 7]);\n        ctx.moveTo(activePoint.element.x, top);\n        ctx.lineTo(activePoint.element.x, bottom);\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = \"rgba(255,99,132, 1)\";\n        ctx.stroke();\n        ctx.restore();\n        tableDataCreating(chartRef.tooltip.dataPoints);\n      }\n    },\n  };\n\n  const resetChartZoom = () => {\n    chartRef.current.resetZoom();\n  };\n\n  return (\n    <>\n      <Paper\n        elevation={10}\n        style={{\n          backgroundColor: \"#f9f8f8\",\n          maxWidth: 1000,\n          minWidth: 800,\n          margin: 20,\n          padding: 15,\n        }}\n      >\n        <Button variant=\"contained\" size=\"small\" onClick={resetChartZoom}>\n          Reset zoom\n        </Button>\n        <Line\n          data={data.data}\n          options={data.options}\n          // onClick={onClick}\n          ref={chartRef}\n          plugins={[annotationLine, zoomPlugin, zoom, Decimation]}\n        />\n\n        <TableContainer component={Paper}>\n          <Table size=\"small\" aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell style={{ width: \"40px\" }} align=\"left\">\n                  Name\n                </TableCell>\n                <TableCell style={{ width: \"40px\" }} align=\"right\">\n                  Current\n                </TableCell>\n                <TableCell style={{ width: \"40px\" }} align=\"right\">\n                  time\n                </TableCell>\n                <TableCell style={{ width: \"40px\" }} align=\"right\">\n                  Minimum\n                </TableCell>\n                <TableCell style={{ width: \"40px\" }} align=\"right\">\n                  Averrage\n                </TableCell>\n                <TableCell style={{ width: \"40px\" }} align=\"right\">\n                  Maximum\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {tableData.map((row, index) => (\n                <TableRow key={index} style={{ width: 40 }}>\n                  <TableCell\n                    style={{ width: \"40px\" }}\n                    variant=\"string\"\n                    align=\"left\"\n                    component=\"th\"\n                    scope=\"row\"\n                  >\n                    {row.name}\n                  </TableCell>\n                  <TableCell\n                    style={{ width: \"40px\" }}\n                    variant=\"string\"\n                    align=\"right\"\n                    component=\"th\"\n                    scope=\"row\"\n                  >\n                    {row.current}\n                  </TableCell>\n                  <TableCell\n                    style={{ width: \"40px\" }}\n                    variant=\"string\"\n                    align=\"right\"\n                    component=\"th\"\n                    scope=\"row\"\n                  >\n                    {row.time}\n                  </TableCell>\n                  <TableCell\n                    style={{ width: \"40px\" }}\n                    variant=\"string\"\n                    align=\"right\"\n                    component=\"th\"\n                    scope=\"row\"\n                  >\n                    {row.minimum}\n                  </TableCell>\n                  <TableCell\n                    style={{ width: \"40px\" }}\n                    variant=\"string\"\n                    align=\"right\"\n                    component=\"th\"\n                    scope=\"row\"\n                  >\n                    {row.maximum}\n                  </TableCell>\n                  <TableCell\n                    style={{ width: \"40px\" }}\n                    variant=\"string\"\n                    align=\"right\"\n                    component=\"th\"\n                    scope=\"row\"\n                  >\n                    {row.average}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n    </>\n  );\n};\n\nexport default Chart;\n"],"names":["ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","TimeSeriesScale","Decimation","data","chartRef","useRef","useState","tableData","setTableData","annotationLine","id","beforeDraw","tooltip","_active","length","ctx","chartArea","top","bottom","save","activePoint","beginPath","setLineDash","moveTo","element","x","lineTo","lineWidth","strokeStyle","stroke","restore","currentArr","newTableArr","map","el","arr","yArr","dataset","y","name","label","current","raw","time","minimum","reduce","Math","min","maximum","max","average","round10","summ","tableDataCreating","dataPoints","elevation","style","backgroundColor","maxWidth","minWidth","margin","padding","variant","size","onClick","resetZoom","options","ref","plugins","zoomPlugin","zoom","component","Paper","width","align","row","index","scope"],"sourceRoot":""}